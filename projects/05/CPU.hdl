// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    // a-reg input source basd on type of instruction
    Mux16(a=instruction, b=aluout, sel=instruction[15], out=aregin);

    // write to A/D/m registers if appropriate c-instr d-bit is set
    // or also, for A, if an a-instr
    Not(in=instruction[15], out=isainstr);
    Or(a=isainstr, b=instruction[5], out=aload);
    And(a=instruction[15], b=instruction[4], out=dload);
    And(a=instruction[15], b=instruction[3], out=writeM);

    ARegister(in=aregin, load=aload, out=aregout, out[0..14]=addressM);
    DRegister(in=aluout, load=dload, out=dregout);

    // ALU always gets D value, and then A or M value based on the a-bit of the c-instr
    Mux16(a=aregout, b=inM, sel=instruction[12], out=aluyin);
    ALU(x=dregout, y=aluyin, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=aluout, out=outM, zr=aluoutzr, ng=aluoutng);

    // ALU output is positive if Nor(negative, zero)
    Or(a=aluoutng, b=aluoutzr, out=alungorzr);
    Not(in=alungorzr, out=aluoutpos);

    // Compare our three status bits neg/zero/pos with the three j-bits from the c-instr
    // If any of the three bits are both true, we know we should jump (if a c-instr)
    And16(a[2]=instruction[2], a[1]=instruction[1], a[0]=instruction[0], b[2]=aluoutng, b[1]=aluoutzr, b[0]=aluoutpos, out[0..2]=jmpval);
    Or8Way(in[0..2]=jmpval, out=shouldjump0);
    And(a=shouldjump0, b=instruction[15], out=shouldjump1);

    PC(in=aregout, load=shouldjump1, inc=true, reset=reset, out[0..14]=pc);
}